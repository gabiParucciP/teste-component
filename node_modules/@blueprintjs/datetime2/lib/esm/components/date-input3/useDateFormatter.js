/*
 * Copyright 2023 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as React from "react";
import { DateUtils } from "@blueprintjs/datetime";
import { getDateFnsFormatter, getDefaultDateFnsFormat } from "../../common/dateFnsFormatUtils";
import { getLocaleCodeFromProps } from "../../common/dateFnsLocaleProps";
/**
 * Create a date string parser function based on a given locale.
 *
 * Prefer using user-provided `props.formatDate` and `props.dateFnsFormat` if available, otherwise fall back to
 * default formats inferred from time picker props.
 */
export function useDateFormatter(props, locale) {
    var _a = props, dateFnsFormat = _a.dateFnsFormat, localeFromProps = _a.locale, formatDate = _a.formatDate, invalidDateMessage = _a.invalidDateMessage, maxDate = _a.maxDate, minDate = _a.minDate, outOfRangeMessage = _a.outOfRangeMessage, timePickerProps = _a.timePickerProps, timePrecision = _a.timePrecision;
    return React.useCallback(function (date) {
        var _a;
        if (date === undefined) {
            return "";
        }
        if (!DateUtils.isDateValid(date)) {
            return invalidDateMessage;
        }
        else if (DateUtils.isDayInRange(date, [minDate, maxDate])) {
            if (formatDate !== undefined) {
                // user-provided date formatter
                return formatDate(date, (_a = locale === null || locale === void 0 ? void 0 : locale.code) !== null && _a !== void 0 ? _a : getLocaleCodeFromProps(localeFromProps));
            }
            else {
                // use user-provided date-fns format or one of the default formats inferred from time picker props
                var format = dateFnsFormat !== null && dateFnsFormat !== void 0 ? dateFnsFormat : getDefaultDateFnsFormat({ timePickerProps: timePickerProps, timePrecision: timePrecision });
                return getDateFnsFormatter(format, locale)(date);
            }
        }
        else {
            return outOfRangeMessage;
        }
    }, [
        dateFnsFormat,
        formatDate,
        invalidDateMessage,
        locale,
        localeFromProps,
        maxDate,
        minDate,
        outOfRangeMessage,
        timePickerProps,
        timePrecision,
    ]);
}
//# sourceMappingURL=useDateFormatter.js.map