/*
 * Copyright 2023 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import classNames from "classnames";
import * as React from "react";
import { CaptionLabel, useDayPicker, useNavigation } from "react-day-picker";
import innerText from "react-innertext";
import { Button, DISPLAYNAME_PREFIX, HTMLSelect } from "@blueprintjs/core";
import { DateUtils, Months } from "@blueprintjs/datetime";
import { ChevronLeft, ChevronRight } from "@blueprintjs/icons";
import { DatePicker3CaptionClasses as CaptionClasses, ReactDayPickerClasses } from "../../classes";
import { useMonthSelectRightOffset } from "../../common/useMonthSelectRightOffset";
import { DatePicker3Context } from "../date-picker3/datePicker3Context";
/**
 * Custom react-day-picker caption component used in non-contiguous two-month date range pickers.
 *
 * We need to override the whole caption instead of its lower-level components because react-day-picker
 * does not have built-in support for non-contiguous range pickers.
 *
 * @see https://react-day-picker.js.org/guides/custom-components
 */
export var DatePicker3Caption = function (props) {
    var _a = useDayPicker(), rdpClassNames = _a.classNames, formatters = _a.formatters, fromDate = _a.fromDate, toDate = _a.toDate, labels = _a.labels;
    var _b = React.useContext(DatePicker3Context), locale = _b.locale, reverseMonthAndYearMenus = _b.reverseMonthAndYearMenus;
    // non-null assertion because we define these values in defaultProps
    var minYear = fromDate.getFullYear();
    var maxYear = toDate.getFullYear();
    var displayMonth = props.displayMonth.getMonth();
    var displayYear = props.displayMonth.getFullYear();
    var containerElement = React.useRef(null);
    var monthSelectElement = React.useRef(null);
    var _c = useNavigation(), currentMonth = _c.currentMonth, goToMonth = _c.goToMonth, nextMonth = _c.nextMonth, previousMonth = _c.previousMonth;
    var handlePreviousClick = React.useCallback(function () { return previousMonth && goToMonth(previousMonth); }, [previousMonth, goToMonth]);
    var handleNextClick = React.useCallback(function () { return nextMonth && goToMonth(nextMonth); }, [nextMonth, goToMonth]);
    var prevButton = (React.createElement(Button, { "aria-label": labels.labelPrevious(previousMonth, { locale: locale }), className: classNames(CaptionClasses.DATEPICKER3_NAV_BUTTON, CaptionClasses.DATEPICKER3_NAV_BUTTON_PREVIOUS), disabled: !previousMonth, icon: React.createElement(ChevronLeft, null), minimal: true, onClick: handlePreviousClick }));
    var nextButton = (React.createElement(Button, { "aria-label": labels.labelNext(nextMonth, { locale: locale }), className: classNames(CaptionClasses.DATEPICKER3_NAV_BUTTON, CaptionClasses.DATEPICKER3_NAV_BUTTON_NEXT), disabled: !nextMonth, icon: React.createElement(ChevronRight, null), minimal: true, onClick: handleNextClick }));
    // build the list of available years, relying on react-day-picker's default date-fns formatter or a
    // user-provided formatter to localize the year "names"
    var formatYearCaption = formatters.formatYearCaption;
    var allYearOptions = React.useMemo(function () {
        var years = [];
        for (var year = minYear; year <= maxYear; year++) {
            var yearDate = new Date(year, 0);
            var yearCaption = formatYearCaption(yearDate, { locale: locale });
            years.push({ label: innerText(yearCaption), value: year });
        }
        return years;
    }, [formatYearCaption, maxYear, minYear, locale]);
    // allow out-of-bounds years but disable the option.
    // this handles the Dec 2016 case in https://github.com/palantir/blueprint/issues/391
    if (displayYear > maxYear) {
        var displayYearDate = new Date(displayYear, 0);
        var displayYearCaption = formatYearCaption(displayYearDate, { locale: locale });
        allYearOptions.push({ label: innerText(displayYearCaption), value: displayYear, disabled: true });
    }
    var handleMonthSelectChange = React.useCallback(function (e) {
        var newMonth = parseInt(e.target.value, 10);
        // ignore change events with invalid values to prevent crash on iOS Safari (#4178)
        if (isNaN(newMonth)) {
            return;
        }
        var newDate = DateUtils.clone(currentMonth);
        newDate.setMonth(newMonth);
        goToMonth(newDate);
    }, [currentMonth, goToMonth]);
    var startMonth = displayYear === minYear ? fromDate.getMonth() : 0;
    var endMonth = displayYear === maxYear ? toDate.getMonth() + 1 : 12;
    // build the list of available months, relying on react-day-picker's default date-fns formatter or a
    // user-provided formatter to localize the month names
    var formatMonthCaption = formatters.formatMonthCaption;
    var allMonths = React.useMemo(function () {
        var months = [];
        for (var i = Months.JANUARY; i <= Months.DECEMBER; i++) {
            var monthDate = new Date(displayYear, i);
            var formattedMonth = formatMonthCaption(monthDate, { locale: locale });
            months.push(innerText(formattedMonth));
        }
        return months;
    }, [displayYear, formatMonthCaption, locale]);
    var allMonthOptions = allMonths.map(function (month, i) { return ({ label: month, value: i }); });
    var availableMonthOptions = allMonthOptions.slice(startMonth, endMonth);
    var displayedMonthText = allMonths[displayMonth];
    var monthSelectRightOffset = useMonthSelectRightOffset(monthSelectElement, containerElement, displayedMonthText);
    var monthSelect = (React.createElement(HTMLSelect, { "aria-label": labels.labelMonthDropdown(), iconProps: { style: { right: monthSelectRightOffset } }, className: classNames(CaptionClasses.DATEPICKER3_DROPDOWN_MONTH, rdpClassNames.dropdown_month), key: "month", minimal: true, onChange: handleMonthSelectChange, ref: monthSelectElement, value: displayMonth, options: availableMonthOptions }));
    var handleYearSelectChange = React.useCallback(function (e) {
        var newYear = parseInt(e.target.value, 10);
        // ignore change events with invalid values to prevent crash on iOS Safari (#4178)
        if (isNaN(newYear)) {
            return;
        }
        var newDate = DateUtils.clone(currentMonth);
        newDate.setFullYear(newYear);
        goToMonth(newDate);
    }, [currentMonth, goToMonth]);
    var yearSelect = (React.createElement(HTMLSelect, { "aria-label": labels.labelYearDropdown(), className: classNames(CaptionClasses.DATEPICKER3_DROPDOWN_YEAR, rdpClassNames.dropdown_year), key: "year", minimal: true, onChange: handleYearSelectChange, value: displayYear, options: allYearOptions }));
    var orderedSelects = reverseMonthAndYearMenus ? [yearSelect, monthSelect] : [monthSelect, yearSelect];
    var hiddenCaptionLabel = (React.createElement("div", { className: ReactDayPickerClasses.RDP_VHIDDEN },
        React.createElement(CaptionLabel, { displayMonth: props.displayMonth, id: props.id })));
    return (React.createElement("div", { className: classNames(CaptionClasses.DATEPICKER3_CAPTION, rdpClassNames.caption), ref: containerElement },
        hiddenCaptionLabel,
        prevButton,
        orderedSelects,
        nextButton));
};
DatePicker3Caption.displayName = "".concat(DISPLAYNAME_PREFIX, ".DatePicker3Caption");
//# sourceMappingURL=datePicker3Caption.js.map